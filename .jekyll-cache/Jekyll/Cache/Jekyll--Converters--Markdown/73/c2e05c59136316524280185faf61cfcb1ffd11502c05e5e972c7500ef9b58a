I"C9<blockquote>
  <p>KSCrash：一个终极的iOS crash reporter</p>
</blockquote>

<p>#为何使用KSCrash？</p>

<p>因为在现有的一些crash reporter报告崩溃时，KSCrash还能比它们还能做得更多。以下是KSCrash的一些关键属性：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="rouge-code"><pre>1. 支持离线重新符号化的设备上符号化(在iOS版本中，许多功能已经被修改)。
2. 生成完全的苹果报告，每个字段都不落下
3. 支持32或64位 
4. 能处理只能在mach级别捕获的错误，比如堆栈溢出。
5. 跟踪由于未捕获的c++异常导致的REAL。
6. 在crash自己的回调里处理crash(或者在用户的crash回调里)
7. 检测僵尸(释放)对象访问尝试
8. 在僵尸或内存损坏的情况下恢复丢失的NSException消息
9. 在寄存器和堆栈上自省对象(C字符串和Objective-C对象，包括ivars)。
10. 提取关于异常引用的对象的信息(例如"unrecognized selector sent to instance 0xa26d9a0")
11. 它的可插入服务报告体系结构使其易于适应任何API服务。
12. 转储堆栈内容。
13. 诊断crash原因(Crash医生)
14. 以JSON格式记录苹果崩溃报告所不能记录的大量信息。
15. 支持包括程序员提供的额外数据(崩溃前和崩溃期间)
</pre></td></tr></tbody></table></code></pre></div></div>
<p>#KSCrash支持处理以下类型的crash:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="rouge-code"><pre>mach 内核异常
致命信号(Fatal signals)
C++ 异常
OC异常
主线程死锁
自定义crash(比如来自脚本语言的自定义crash)
</pre></td></tr></tbody></table></code></pre></div></div>
<p>#KSCrash可以向以下服务器报导：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>Hockey
QuincyKit
Victory
Email
</pre></td></tr></tbody></table></code></pre></div></div>

<p>#新特性：</p>

<p>C++异常处理：
是的，通常你的app由于未捕获的C++异常而终止，你会看到这样的堆栈：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="rouge-code"><pre>Thread 0 name:  Dispatch queue: com.apple.main-thread
Thread 0 Crashed:
0   libsystem_kernel.dylib          0x9750ea6a 0x974fa000 + 84586 (__pthread_kill + 10)
1   libsystem_sim_c.dylib           0x04d56578 0x4d0f000 + 292216 (abort + 137)
2   libc++abi.dylib                 0x04ed6f78 0x4ed4000 + 12152 (abort_message + 102)
3   libc++abi.dylib                 0x04ed4a20 0x4ed4000 + 2592 (_ZL17default_terminatev + 29)
4   libobjc.A.dylib                 0x013110d0 0x130b000 + 24784 (_ZL15_objc_terminatev + 109)
5   libc++abi.dylib                 0x04ed4a60 0x4ed4000 + 2656 (_ZL19safe_handler_callerPFvvE + 8)
6   libc++abi.dylib                 0x04ed4ac8 0x4ed4000 + 2760 (_ZSt9terminatev + 18)
7   libc++abi.dylib                 0x04ed5c48 0x4ed4000 + 7240 (__cxa_rethrow + 77)
8   libobjc.A.dylib                 0x01310fb8 0x130b000 + 24504 (objc_exception_rethrow + 42)
9   CoreFoundation                  0x01f2af98 0x1ef9000 + 204696 (CFRunLoopRunSpecific + 360)
...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>根本没法跟踪这个异常是啥和在哪抛出的！
现在有了KSCrash，你可以从下面信息获得未捕获的异常类型、描述、和它抛出的地方：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="rouge-code"><pre>Application Specific Information:
*** Terminating app due to uncaught exception 'MyException', reason: 'Something bad happened...'

Thread 0 name:  Dispatch queue: com.apple.main-thread
Thread 0 Crashed:
0   Crash-Tester                    0x0000ad80 0x1000 + 40320 (-[Crasher throwUncaughtCPPException] + 0)
1   Crash-Tester                    0x0000842e 0x1000 + 29742 (__32-[AppDelegate(UI) crashCommands]_block_invoke343 + 78)
2   Crash-Tester                    0x00009523 0x1000 + 34083 (-[CommandEntry executeWithViewController:] + 67)
3   Crash-Tester                    0x00009c0a 0x1000 + 35850 (-[CommandTVC tableView:didSelectRowAtIndexPath:] + 154)
4   UIKit                           0x0016f285 0xb4000 + 766597 (-[UITableView _selectRowAtIndexPath:animated:scrollPosition:notifyDelegate:] + 1194)
5   UIKit                           0x0016f4ed 0xb4000 + 767213 (-[UITableView _userSelectRowAtPendingSelectionIndexPath:] + 201)
6   Foundation                      0x00b795b3 0xb6e000 + 46515 (__NSFireDelayedPerform + 380)
7   CoreFoundation                  0x01f45376 0x1efa000 + 308086 (__CFRUNLOOP_IS_CALLING_OUT_TO_A_TIMER_CALLBACK_FUNCTION__ + 22)
8   CoreFoundation                  0x01f44e06 0x1efa000 + 306694 (__CFRunLoopDoTimer + 534)
9   CoreFoundation                  0x01f2ca82 0x1efa000 + 207490 (__CFRunLoopRun + 1810)
10  CoreFoundation                  0x01f2bf44 0x1efa000 + 204612 (CFRunLoopRunSpecific + 276)
...
</pre></td></tr></tbody></table></code></pre></div></div>

<p>#方便的C++开发助手
如果你打开跟踪打印：
`
[KSCrash sharedInstance].printTraceToStdout = YES;
`
它会在你的app抛出未捕获C++异常的时候打印一个合适的堆栈跟踪信息到标准输出(stdout)上！否则调试器只会将你引向重新抛出异常的位置。</p>

<p>#自定义Crash和堆栈跟踪
你现在可以报导你自己自定义的crash和堆栈跟踪信息(想一下脚本语言)</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre>- (void) reportUserException:(NSString*) name
reason:(NSString*) reason
lineOfCode:(NSString*) lineOfCode
stackTrace:(NSArray*) stackTrace
terminateProgram:(BOOL) terminateProgram;
</pre></td></tr></tbody></table></code></pre></div></div>

<p>详情见KSCrash.h文件。</p>

<p>#不稳定的特性
下列特性被认为是”不稳定”的，并且默认禁用：
死锁检测</p>

<p>#不兼容API更改通知
从2013年1月29日起，我修改了KSCrash主API，使用属性而不是初始化方法参数进行配置。有了所有的新选择后，事情开始变得有点棘手。这应该是最后一个主要的API更改。</p>

<p>注意:初始化KSCrash的首选方法现在是通过安装对象，而不是直接使用过滤器。详见“如何使用KSCrash”。</p>

<p>#如何build KSCrash</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="rouge-code"><pre>1 选中KSCrash的scheme
2 选择iOS设备
3 Products菜单里选择Archive
</pre></td></tr></tbody></table></code></pre></div></div>
<p>当build完成，会在Finder看到framework，你可以像使用任何其他framework一样使用它。</p>

<p>#如何使用KSCrash
1 添加这个framework到你的工程(或者添加KSCrash工程进来，作为依赖项)
2 添加下列系统framework和lib到你的工程</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>libc++.dylib
libz.dylib
MessageUI.framework (iOS only)
SystemConfiguration.framework
</pre></td></tr></tbody></table></code></pre></div></div>

<p>3 在Build Setting是的Other Linker Flags里添加”-Objc”标识
4 添加下列内容到你app delegate的 <code class="highlighter-rouge">[application: didFinishLaunchingWithOptions:] </code>方法里：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
</pre></td><td class="rouge-code"><pre>#import &lt;KSCrash/KSCrash.h&gt;
// Include to use the standard reporter.
#import &lt;KSCrash/KSCrashInstallationStandard.h&gt;
// Include to use Quincy or Hockey.
#import &lt;KSCrash/KSCrashInstallationQuincyHockey.h&gt;
// Include to use the email reporter.
#import &lt;KSCrash/KSCrashInstallationEmail.h&gt;
// Include to use Victory.
#import &lt;KSCrash/KSCrashInstallationVictory.h&gt;

- (BOOL)application:(UIApplication*) application didFinishLaunchingWithOptions:(NSDictionary*) launchOptions
{
KSCrashInstallationStandard* installation = [KSCrashInstallationStandard sharedInstance];
installation.url = [NSURL URLWithString:@"http://put.your.url.here"];

// OR:

KSCrashInstallationQuincy* installation = [KSCrashInstallationQuincy sharedInstance];
installation.url = [NSURL URLWithString:@"http://put.your.url.here"];

// OR:

KSCrashInstallationHockey* installation = [KSCrashInstallationHockey sharedInstance];
installation.appIdentifier = @"PUT_YOUR_HOCKEY_APP_ID_HERE";

// OR:

KSCrashInstallationEmail* installation = [KSCrashInstallationEmail sharedInstance];
installation.recipients = @[@"some@email.address"];

// Optional (Email): Send Apple-style reports instead of JSON
[installation setReportStyle:KSCrashEmailReportStyleApple useDefaultFilenameFormat:YES]; 

// Optional: Add an alert confirmation (recommended for email installation)
[installation addConditionalAlertWithTitle:@"Crash Detected"
message:@"The app crashed last time it was launched. Send a crash report?"
yesAnswer:@"Sure!"
noAnswer:@"No thanks"];

// OR:

KSCrashInstallationVictory* installation = [KSCrashInstallationVictory sharedInstance];
installation.url = [NSURL URLWithString:@"https://put.your.url.here/api/v1/crash/&lt;application key&gt;"];

[installation install];
…
}
</pre></td></tr></tbody></table></code></pre></div></div>

<p>这将安装崩溃哨兵系统(可以拦截crashes并将报告存存盘)。不过注意，你还可以为各种安装设置其他你想要的其他属性。
一旦你准备发送任何的crash报告，调用如下方法：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>[installation sendAllReportsWithCompletion:^(NSArray *filteredReports, BOOL completed, NSError *error)
{
// Stuff to do when report sending is complete
}];
</pre></td></tr></tbody></table></code></pre></div></div>

<p>#推荐阅读
如果可以的话，你应该阅读下列头文件来完全理解KSCrash所拥有的特性和如何使用它：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre>KSCrash.h
KSCrashInstallation.h
KSCrashInstallation(SPECIFIC TYPE).h
Architecture.md
</pre></td></tr></tbody></table></code></pre></div></div>

<p>#高端用法</p>

<p>##允许设备内置符号化
##允许高级功能
KSCrash具有一些在一片茫然中检查崩溃报告时非常有用的高级功能。其中一些涉及到较小的权衡，因此大多数默认情况下是禁用的。
###自定义用户数据(KSCrash.h中的userInfo)
设置userInfo属性后，你可以将自定义用户数据存储到下一次的crash report上
###僵尸对象跟踪(KSCrash.h中的zombieCacheSize)
KSCrash具有检测僵尸对象(指向已释放对象的悬停指针)的能力。它通过记录已释放对象的类型和地址来做到这一点。它将这些值存储在缓存中，并切断已释放对象的地址。这意味着，设置缓存的大小越小，哈希冲突发生的几率越大。并且你将因此失去先前已释放对象的信息。</p>

<p>启用僵尸跟踪后，KSCrash还将检测丢失的NSException并打印其内容。某些类型的内存损坏或堆栈损坏崩溃可能会导致异常提前释放，从而进一步影响调试应用程序的工作，因此该特性有时非常方便。</p>

<p>权衡：僵尸跟踪的代价是向对象释放位置添加非常小的开销，并保留一些内存。</p>

<p>###死锁检测(KSCrash.h中的deadlockWatchdogInterval)
<em>严正警告！！本功能是不稳定的！它会呈现假阳性并使你的app崩溃！</em>
###内存自省(KSCrash.h中的introspectMemory)
当应用程序崩溃时，内存中通常残留有被栈、寄存器甚至异常消息引用的对象和字符串。当启用此功能时，KSCrash将内省这些内存区域并将它们的内容存储到crash report中。</p>

<p>你也可以通过设置doNotIntrospectClasses属性，指定一个类的列表，来避免这些类的自省。
###自定义crash处理代码(KSCrash.h中的onCrash)</p>

<p>如果你想在crash发生时做一些额外操作(比如添加更多的上下文数据信息到报告中去)，你可以这么做。</p>

<p>然而，你必须确保你只使用异步安全的代码。并且最重要的是，不要那个方法里调用OC代码！在很多情况下，你都可以这样做，但是在某些特定的崩溃类中，无视此警告的处理程序代码将导致崩溃处理程序崩溃! 注意，如果发生这种情况，KSCrash将检测它并编写完整的报告，尽管您的自定义处理程序代码可能没有完全运行！</p>

<p>权衡： 你必须小心你所放入的自定义崩溃处理代码！</p>

<p>###KSCrash 日志重定向</p>

<p>这会将KSCrash将要打印到控制台的内容，写到一个文件里。我通常用这个功能来调试KSCrash自身，但它也可以拍派很多其他用场，所以我公开为它公开了一个API！</p>

<p>#例子
workspace中包含了几个例子app，用来演示常见的KSCrash用法。请看下每个AppDelegate.m文件的顶部信息来了解它做了什么。</p>

<p>原链接: https://github.com/kstenerud/KSCrash</p>

:ET